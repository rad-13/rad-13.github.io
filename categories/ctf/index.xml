<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ctf on R13</title>
    <link>https://rad-13.github.io/categories/ctf/</link>
    <description>Recent content in Ctf on R13</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>it-it</language>
    <lastBuildDate>Mon, 28 Jan 2019 19:56:33 +0100</lastBuildDate>
    
	<atom:link href="https://rad-13.github.io/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FireShell CTF - casino</title>
      <link>https://rad-13.github.io/posts/casino/</link>
      <pubDate>Mon, 28 Jan 2019 19:56:33 +0100</pubDate>
      
      <guid>https://rad-13.github.io/posts/casino/</guid>
      <description>casino è la seconda sfida proposta nella sezione pwning della FireShell CTF. Non è una sfida molto complessa, ma per via della sua originalità e delle tecniche richieste diverse dai soliti buffer overflow ho deciso di inserirla tra i post.
La sfida presenta un solo eseguibile, un ELF64. Download
Analizzando il programma con rabin2 possiamo dare un occhiata alle caratteristiche principali dell&amp;rsquo;eseguibile.
arch x86 baddr 0x400000 binsz 11297 bintype elf bits 64 canary true sanitiz false class ELF64 crypto false endian little havecode true intrp /lib64/ld-linux-x86-64.</description>
    </item>
    
    <item>
      <title>CSAW 2018 - get_it</title>
      <link>https://rad-13.github.io/posts/get_it/</link>
      <pubDate>Tue, 27 Nov 2018 20:18:33 +0100</pubDate>
      
      <guid>https://rad-13.github.io/posts/get_it/</guid>
      <description>get_it è la prima sfida offerta nella categoria pwning delle per la CSAW 2018 (qualificazioni).
Il binario fornito è un ELF64. Download
Appena scaricato possiamo analizzarlo utilizzano rabin2, un tool molto utile al fine di ottenere informazioni su un binario. Passando il parametro -I (binary info) otteniamo il seguente output:
arch x86 baddr 0x400000 binsz 6754 bintype elf bits 64 canary false sanitiz false class ELF64 crypto false endian little havecode true intrp /lib64/ld-linux-x86-64.</description>
    </item>
    
    <item>
      <title>Reply challenge - wysiNwyg</title>
      <link>https://rad-13.github.io/posts/wysinwyg/</link>
      <pubDate>Sun, 25 Nov 2018 20:18:33 +0100</pubDate>
      
      <guid>https://rad-13.github.io/posts/wysinwyg/</guid>
      <description>What You See Is Not What You Get è la sfida da 400 punti nella sezione binary della CTF Reply.
Essa rappresenta la sfida più complessa delle prove date in preparazione alla challenge vera e propria.
Ci viene fornito un file zip contene un archivio protetto da password ed un eseguibile ELF32. Download
Se proviamo a debuggarlo il programma risponde: No debugger please! L&amp;rsquo;eseguibile controlla che l&amp;rsquo;esecuzione non sia fatta attraverso un debugger, in pratica cerca di effettuare una ptrace, un chiamata di sistema qui meglio descritta.</description>
    </item>
    
  </channel>
</rss>